{"version":3,"sources":["http-common.js","services/column.service.js","components/add-column.component.js","actions/columns.js","actions/types.js","components/column.component.js","components/column-list.component.js","App.js","reducers/index.js","store.js","index.js"],"names":["axios","create","baseURL","headers","http","get","id","data","post","put","delete","title","AddColumn","props","onChangeTitle","bind","onChangeDescription","saveColumn","newColumn","state","description","published","submitted","e","this","setState","target","value","createColumn","then","console","log","catch","className","onClick","htmlFor","type","required","onChange","name","Component","connect","dispatch","a","ColumnDataService","res","payload","Promise","resolve","reject","Column","getColumn","updateStatus","updateContent","removeColumn","currentColumn","message","match","params","prevState","response","status","updateColumn","reponse","deleteColumn","history","push","update","ColumnsList","onChangeSearchTitle","refreshData","setActiveColumn","findByTitle","removeAllColumns","currentIndex","searchTitle","retrieveColumns","column","index","deleteAllColumns","findColumnsByTitle","columns","placeholder","map","key","to","getAll","deleteAll","App","exact","path","component","combineReducers","middleware","thunk","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e3259cbf.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport default axios.create({\r\n  baseURL: \"http://localhost:4200/api\",\r\n  headers: {\r\n    \"Content-type\": \"application/json\"\r\n  }\r\n});","import http from \"../http-common\";\r\n\r\nclass ColumnDataService {\r\n  getAll() {\r\n    return http.get(\"/columns\");\r\n  }\r\n\r\n  get(id) {\r\n    return http.get(`/columns/${id}`);\r\n  }\r\n\r\n  create(data) {\r\n    return http.post(\"/columns\", data);\r\n  }\r\n\r\n  update(id, data) {\r\n    return http.put(`/columns/${id}`, data);\r\n  }\r\n\r\n  delete(id) {\r\n    return http.delete(`/columns/${id}`);\r\n  }\r\n\r\n  deleteAll() {\r\n    return http.delete(`/columns`);\r\n  }\r\n\r\n  findByTitle(title) {\r\n    return http.get(`/columns?title=${title}`);\r\n  }\r\n}\r\n\r\nexport default new ColumnDataService();","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { createColumn } from \"../actions/columns\";\r\n\r\nclass AddColumn extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.onChangeTitle = this.onChangeTitle.bind(this);\r\n    this.onChangeDescription = this.onChangeDescription.bind(this);\r\n    this.saveColumn = this.saveColumn.bind(this);\r\n    this.newColumn = this.newColumn.bind(this);\r\n\r\n    this.state = {\r\n      id: null,\r\n      title: \"\",\r\n      description: \"\",\r\n      published: false,\r\n\r\n      submitted: false,\r\n    };\r\n  }\r\n\r\n  onChangeTitle(e) {\r\n    this.setState({\r\n      title: e.target.value,\r\n    });\r\n  }\r\n\r\n  onChangeDescription(e) {\r\n    this.setState({\r\n      description: e.target.value,\r\n    });\r\n  }\r\n\r\n  saveColumn() {\r\n    const { title, description } = this.state;\r\n\r\n    this.props\r\n      .createColumn(title, description)\r\n      .then((data) => {\r\n        this.setState({\r\n          id: data.id,\r\n          title: data.title,\r\n          description: data.description,\r\n          published: data.published,\r\n\r\n          submitted: true,\r\n        });\r\n        console.log(data);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  newColumn() {\r\n    this.setState({\r\n      id: null,\r\n      title: \"\",\r\n      description: \"\",\r\n      published: false,\r\n\r\n      submitted: false,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <div className=\"submit-form\">\r\n        {this.state.submitted ? (\r\n          <div>\r\n            <h4>You submitted successfully!</h4>\r\n            <button className=\"btn btn-success\" onClick={this.newColumn}>\r\n              Add\r\n            </button>\r\n          </div>\r\n        ) : (\r\n          <div>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"title\">Title</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                id=\"title\"\r\n                required\r\n                value={this.state.title}\r\n                onChange={this.onChangeTitle}\r\n                name=\"title\"\r\n              />\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"description\">Description</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                id=\"description\"\r\n                required\r\n                value={this.state.description}\r\n                onChange={this.onChangeDescription}\r\n                name=\"description\"\r\n              />\r\n            </div>\r\n\r\n            <button onClick={this.saveColumn} className=\"btn btn-success\">\r\n              Submit\r\n            </button>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(null, { createColumn })(AddColumn);","import {\r\n    CREATE_COLUMN,\r\n    RETRIEVE_COLUMNS,\r\n    UPDATE_COLUMN,\r\n    DELETE_COLUMN,\r\n    DELETE_ALL_COLUMNS\r\n  } from \"./types\";\r\n\r\n  import ColumnDataService from \"../services/column.service\";\r\n\r\n  export const createColumn = (title, description) => async (dispatch) => {\r\n    try {\r\n      const res = await ColumnDataService.create({ title, description });\r\n  \r\n      dispatch({\r\n        type: CREATE_COLUMN,\r\n        payload: res.data,\r\n      });\r\n  \r\n      return Promise.resolve(res.data);\r\n    } catch (err) {\r\n      return Promise.reject(err);\r\n    }\r\n  };\r\n  \r\n  export const retrieveColumns = () => async (dispatch) => {\r\n    try {\r\n      const res = await ColumnDataService.getAll();\r\n  \r\n      dispatch({\r\n        type: RETRIEVE_COLUMNS,\r\n        payload: res.data,\r\n      });\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n  \r\n  export const updateColumn = (id, data) => async (dispatch) => {\r\n    try {\r\n      const res = await ColumnDataService.update(id, data);\r\n  \r\n      dispatch({\r\n        type: UPDATE_COLUMN,\r\n        payload: data,\r\n      });\r\n  \r\n      return Promise.resolve(res.data);\r\n    } catch (err) {\r\n      return Promise.reject(err);\r\n    }\r\n  };\r\n  \r\n  export const deleteColumn = (id) => async (dispatch) => {\r\n    try {\r\n      await ColumnDataService.delete(id);\r\n  \r\n      dispatch({\r\n        type: DELETE_COLUMN,\r\n        payload: { id },\r\n      });\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n  \r\n  export const deleteAllColumns = () => async (dispatch) => {\r\n    try {\r\n      const res = await ColumnDataService.deleteAll();\r\n  \r\n      dispatch({\r\n        type: DELETE_ALL_COLUMNS,\r\n        payload: res.data,\r\n      });\r\n  \r\n      return Promise.resolve(res.data);\r\n    } catch (err) {\r\n      return Promise.reject(err);\r\n    }\r\n  };\r\n  \r\n  export const findColumnsByTitle = (title) => async (dispatch) => {\r\n    try {\r\n      const res = await ColumnDataService.findByTitle(title);\r\n  \r\n      dispatch({\r\n        type: RETRIEVE_COLUMNS,\r\n        payload: res.data,\r\n      });\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n  ","export const CREATE_COLUMN = \"CREATE_COLUMN\";\r\nexport const RETRIEVE_COLUMNS = \"RETRIEVE_COLUMNS\";\r\nexport const UPDATE_COLUMN = \"UPDATE_COLUMN\";\r\nexport const DELETE_COLUMN = \"DELETE_COLUMN\";\r\nexport const DELETE_ALL_COLUMNS = \"DELETE_ALL_COLUMNS\";","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { updateColumn, deleteColumn } from \"../actions/columns\";\r\nimport ColumnDataService from \"../services/column.service\";\r\n\r\nclass Column extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.onChangeTitle = this.onChangeTitle.bind(this);\r\n    this.onChangeDescription = this.onChangeDescription.bind(this);\r\n    this.getColumn = this.getColumn.bind(this);\r\n    this.updateStatus = this.updateStatus.bind(this);\r\n    this.updateContent = this.updateContent.bind(this);\r\n    this.removeColumn = this.removeColumn.bind(this);\r\n\r\n    this.state = {\r\n      currentColumn: {\r\n        id: null,\r\n        title: \"\",\r\n        description: \"\",\r\n        published: false,\r\n      },\r\n      message: \"\",\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getColumn(this.props.match.params.id);\r\n  }\r\n\r\n  onChangeTitle(e) {\r\n    const title = e.target.value;\r\n\r\n    this.setState(function (prevState) {\r\n      return {\r\n        currentColumn: {\r\n          ...prevState.currentColumn,\r\n          title: title,\r\n        },\r\n      };\r\n    });\r\n  }\r\n\r\n  onChangeDescription(e) {\r\n    const description = e.target.value;\r\n\r\n    this.setState((prevState) => ({\r\n        currentColumn: {\r\n        ...prevState.currentColumn,\r\n        description: description,\r\n      },\r\n    }));\r\n  }\r\n\r\n  getColumn(id) {\r\n    ColumnDataService.get(id)\r\n      .then((response) => {\r\n        this.setState({\r\n            currentColumn: response.data,\r\n        });\r\n        console.log(response.data);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  updateStatus(status) {\r\n    var data = {\r\n      id: this.state.currentColumn.id,\r\n      title: this.state.currentColumn.title,\r\n      description: this.state.currentColumn.description,\r\n      published: status,\r\n    };\r\n\r\n    this.props\r\n      .updateColumn(this.state.currentColumn.id, data)\r\n      .then((reponse) => {\r\n        console.log(reponse);\r\n\r\n        this.setState((prevState) => ({\r\n            currentColumn: {\r\n            ...prevState.currentColumn,\r\n            published: status,\r\n          },\r\n        }));\r\n\r\n        this.setState({ message: \"The status was updated successfully!\" });\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  updateContent() {\r\n    this.props\r\n      .updateColumn(this.state.currentColumn.id, this.state.currentColumn)\r\n      .then((reponse) => {\r\n        console.log(reponse);\r\n        \r\n        this.setState({ message: \"The column was updated successfully!\" });\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  removeColumn() {\r\n    this.props\r\n      .deleteColumn(this.state.currentColumn.id)\r\n      .then(() => {\r\n        this.props.history.push(\"/columns\");\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  render() {\r\n    const { currentColumn } = this.state;\r\n\r\n    return (\r\n        <div>\r\n        {currentColumn ? (\r\n          <div className=\"edit-form\">\r\n            <h4>Column</h4>\r\n            <form>\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"title\">Title</label>\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  id=\"title\"\r\n                  value={currentColumn.title}\r\n                  onChange={this.onChangeTitle}\r\n                />\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"description\">Description</label>\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  id=\"description\"\r\n                  value={currentColumn.description}\r\n                  onChange={this.onChangeDescription}\r\n                />\r\n              </div>\r\n\r\n              <div className=\"form-group\">\r\n                <label>\r\n                  <strong>Status:</strong>\r\n                </label>\r\n                {currentColumn.published ? \"Published\" : \"Pending\"}\r\n              </div>\r\n            </form>\r\n\r\n            {currentColumn.published ? (\r\n              <button\r\n                className=\"badge badge-primary mr-2\"\r\n                onClick={() => this.updateStatus(false)}\r\n              >\r\n                UnPublish\r\n              </button>\r\n            ) : (\r\n              <button\r\n                className=\"badge badge-primary mr-2\"\r\n                onClick={() => this.updateStatus(true)}\r\n              >\r\n                Publish\r\n              </button>\r\n            )}\r\n\r\n            <button\r\n              className=\"badge badge-danger mr-2\"\r\n              onClick={this.removeColumn}\r\n            >\r\n              Delete\r\n            </button>\r\n\r\n            <button\r\n              type=\"submit\"\r\n              className=\"badge badge-success\"\r\n              onClick={this.updateContent}\r\n            >\r\n              Update\r\n            </button>\r\n            <p>{this.state.message}</p>\r\n          </div>\r\n        ) : (\r\n          <div>\r\n            <br />\r\n            <p>Please click on a Column...</p>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(null, { updateColumn, deleteColumn })(Column);","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport {Link} from 'react-router-dom';\r\nimport { retrieveColumns, findColumnsByTitle, deleteAllColumns } from \"../actions/columns\";\r\n\r\nclass ColumnsList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.onChangeSearchTitle = this.onChangeSearchTitle.bind(this);\r\n    this.refreshData = this.refreshData.bind(this);\r\n    this.setActiveColumn = this.setActiveColumn.bind(this);\r\n    this.findByTitle = this.findByTitle.bind(this);\r\n    this.removeAllColumns = this.removeAllColumns.bind(this);\r\n\r\n    this.state = {\r\n      currentColumn: null,\r\n      currentIndex: -1,\r\n      searchTitle: \"\",\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.retrieveColumns();\r\n  }\r\n\r\n  onChangeSearchTitle(e) {\r\n    const searchTitle = e.target.value;\r\n\r\n    this.setState({\r\n      searchTitle: searchTitle,\r\n    });\r\n  }\r\n\r\n  refreshData() {\r\n    this.setState({\r\n      currentColumn: null,\r\n      currentIndex: -1,\r\n    });\r\n  }\r\n\r\n  setActiveColumn(column, index) {\r\n    this.setState({\r\n      currentColumn: column,\r\n      currentIndex: index,\r\n    });\r\n  }\r\n\r\n  removeAllColumns() {\r\n    this.props\r\n      .deleteAllColumns()\r\n      .then((response) => {\r\n        console.log(response);\r\n        this.refreshData();\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  findByTitle() {\r\n    this.refreshData();\r\n\r\n    this.props.findColumnsByTitle(this.state.searchTitle);\r\n  }\r\n\r\n  render() {\r\n    const { searchTitle, currentColumn, currentIndex } = this.state;\r\n    const { columns } = this.props;\r\n\r\n    return (\r\n        <div className=\"list row\">\r\n        <div className=\"col-md-8\">\r\n          <div className=\"input-group mb-3\">\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              placeholder=\"Search by title\"\r\n              value={searchTitle}\r\n              onChange={this.onChangeSearchTitle}\r\n            />\r\n            <div className=\"input-group-append\">\r\n              <button\r\n                className=\"btn btn-outline-secondary\"\r\n                type=\"button\"\r\n                onClick={this.findByTitle}\r\n              >\r\n                Search\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"col-md-6\">\r\n          <h4>Columns List</h4>\r\n\r\n          <ul className=\"list-group\">\r\n            {columns &&\r\n              columns.map((column, index) => (\r\n                <li\r\n                  className={\r\n                    \"list-group-item \" +\r\n                    (index === currentIndex ? \"active\" : \"\")\r\n                  }\r\n                  onClick={() => this.setActiveColumn(column, index)}\r\n                  key={index}\r\n                >\r\n                  {column.title}\r\n                </li>\r\n              ))}\r\n          </ul>\r\n\r\n          <button\r\n            className=\"m-3 btn btn-sm btn-danger\"\r\n            onClick={this.removeAllColumns}\r\n          >\r\n            Remove All\r\n          </button>\r\n        </div>\r\n        <div className=\"col-md-6\">\r\n          {currentColumn ? (\r\n            <div>\r\n              <h4>Column</h4>\r\n              <div>\r\n                <label>\r\n                  <strong>Title:</strong>\r\n                </label>{\" \"}\r\n                {currentColumn.title}\r\n              </div>\r\n              <div>\r\n                <label>\r\n                  <strong>Description:</strong>\r\n                </label>{\" \"}\r\n                {currentColumn.description}\r\n              </div>\r\n              <div>\r\n                <label>\r\n                  <strong>Status:</strong>\r\n                </label>{\" \"}\r\n                {currentColumn.published ? \"Published\" : \"Pending\"}\r\n              </div>\r\n              <Link\r\n                to={\"/columns/\" + currentColumn.id}\r\n                className=\"badge badge-warning\"\r\n              >\r\n                Edit\r\n              </Link>\r\n            </div>\r\n          ) : (\r\n            <div>\r\n              <br />\r\n              <p>Please click on a Column...</p>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    columns: state.columns,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, { retrieveColumns, findColumnsByTitle, deleteAllColumns })(ColumnsList);\r\n","import React, { Component } from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { BrowserRouter as Router,  Switch, Route, Link } from \"react-router-dom\";\r\nimport \"./App.css\";\r\nimport AddColumn from \"./components/add-column.component\";\r\nimport Column from \"./components/column.component\";\r\nimport ColumnsList from \"./components/column-list.component\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n        <Router>\r\n          <nav className=\"navbar navbar-expand navbar-dark bg-dark\">\r\n          <Link to={\"/columns\"} className=\"navbar-brand\">\r\n            Learning-Diary\r\n          </Link>\r\n          <div className=\"navbar-nav mr-auto\">\r\n            <li className=\"nav-item\">\r\n              <Link to={\"/columns\"} className=\"nav-link\">\r\n                Columns\r\n              </Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <Link to={\"/add\"} className=\"nav-link\">\r\n                Add\r\n              </Link>\r\n            </li>\r\n          </div>\r\n        </nav>\r\n\r\n        <div className=\"container mt-3\">\r\n          <Switch>\r\n            <Route exact path={[\"/\", \"/columns\"]} component={ColumnsList} />\r\n            <Route exact path=\"/add\" component={AddColumn} />\r\n            <Route path=\"/columns/:id\" component={Column} />\r\n          </Switch>\r\n        </div>\r\n        </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","import { combineReducers } from \"redux\";\r\nimport columns from \"./columns\";\r\n\r\nexport default combineReducers({\r\n  columns,\r\n});","import { createStore, applyMiddleware } from 'redux';\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\n\r\nconst initialState = {};\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  initialState,\r\n  composeWithDevTools(applyMiddleware(...middleware))\r\n);\r\n\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport { Provider } from 'react-redux';\r\nimport store from './store';\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}